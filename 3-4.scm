#lang scheme

(require "modules/sicp/sicp.rkt")

(define (make-account balance secret)
  (let ((attempts 0))
    (define (withdraw amount)
      (cond ((>= balance amount) (begin (set! balance (- balance amount))
                                        balance))
            (else "Insufficient funds")))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (call-the-cops)
      (error "calling the cops"))
    (define (invalid-attempt x)
      (set! attempts (+ attempts 1))
      (if (> attempts 7)
          (call-the-cops)
          "Wrong password â€“ try again"))
    (define (reset-attempts)
      (set! attempts 0))
      
    (define (dispatch m password)
      (cond ((eq? secret password) (reset-attempts)
                                   (cond ((eq? m 'withdraw) withdraw)
                                         ((eq? m 'deposit) deposit)
                                         (else (error "Unknown request - MAKE-ACCOUNT"
                                                      m))))
            (else invalid-attempt)))
    dispatch))

(define a (make-account 100 'qwerty))

(assert ((a 'withdraw 'qwerty) 40)
        60)
(assert  ((a 'deposit 'qwerty) 1000)
         1060)

((a 'deposit 'qerty) 1000)
((a 'deposit 'qerty) 1000)
((a 'deposit 'qerty) 1000)
((a 'deposit 'qerty) 1000)
((a 'deposit 'qerty) 1000)
((a 'deposit 'qerty) 1000)
((a 'deposit 'qerty) 1000)
((a 'deposit 'qwerty) 1000)
((a 'deposit 'qerty) 1000)